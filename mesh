#!/usr/bin/env python3

from cmd import Cmd
from tabulate import tabulate
import subprocess, sys, os, math

debug = False


class MyPrompt(Cmd):
    prompt = "mesh> "
    intro = "MAAS executive shell"

    def do_exit(self, inp):
        """exit the application"""
        return True

    def help_exit(self):
        print("exit mesh: x q Ctrl-D")

    def do_ls(self, inp):

        # get the terminal width in columns
        rw, cl = os.popen("stty size", "r").read().split()
        columns = int(cl)

        # what are the filenames in the cwd?
        filenames = subprocess.check_output("ls").decode("ascii").splitlines()

        # prepend :maas: to the list
        filenames.insert(0, ":maas:")

        # estimate number of rows
        rows = math.ceil(len("".join(filenames)) / columns)

        # TODO: fix this to deal with partial rows
        # dry-run to find correct number of rows (lines)
        for trows in range(rows, rows + 3):

            # each new row-count resets everything
            matrix = []
            colwidth = []

            # for every trial row in this attempt
            for i in range(0, trows):

                # create a list for the columns
                matrix.append([])
                column = 0

                # for every trowth filename, since they go down, then across by alpha
                for j in range(i, len(filenames), trows):

                    # append the filename to this row-column
                    matrix[i].append(filenames[j])
                    try:
                        if colwidth[column] < len(filenames[j]):
                            colwidth[column] = len(filenames[j])
                    except:
                        colwidth.append(len(filenames[j]))
                    column += 1
                if sum(colwidth) + 2 * len(colwidth) + 2 > columns:
                    break
            if sum(colwidth) + 2 * len(colwidth) + 2 < columns:
                break

        for x in matrix:
            print("  ", end="")
            for i in range(0, len(x)):
                print(str(x[i]).ljust(colwidth[i]), "  ", end="")
            print("")

        return

    def help_ls(self):
        print("ls\tlist directory contents")
        print("\twhen used on a maas object, lists next lower level objects")

    def do_chmod(self, inp):
        pass

    def do_cat(self, inp):
        pass

    def do_mknod(self, inp):
        pass

    def do_add(self, inp):
        print("Adding '{}'", format(inp))

    def help_add(self):
        print("Add a new entry to the system.")

    def default(self, inp):
        try:
            subprocess.run(inp.split())
        except KeyboardInterrupt:
            sys.exit(0)
        except Exception:
            print("mesh: command not found: {}".format(inp))

    do_EOF = do_exit
    help_EOF = help_exit


MyPrompt().cmdloop()
