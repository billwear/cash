#!/usr/bin/python3
import sys, subprocess, json, os
from tabulate import tabulate
from pathlib import Path
import click, yaml, pickle, time

home = str(Path.home())
pickle_filepath = home + "/.system.swap"

username = ""
ENOJSON = 1
ENORECD = 2
ENOAUTH = 4


def get_machine_data(param):
    args = []
    args.append("maas")
    args.append(username)
    args.append("machines")
    args.append("read")
    if param != None:
        args.append(param)

    proc = subprocess.Popen(args, stdout=subprocess.PIPE)

    output = proc.stdout.read()

    try:
        machine_json = json.loads(output)
    except:
        print("couldn't load json correctly; exiting")
        sys.exit(ENOJSON)

    return machine_json


def print_summary(machine_json):
    data = []

    for x in machine_json:
        try:
            data.append(
                [
                    x["hostname"] + "\n" + x["system_id"],
                    str(x["power_state"]) + "\n" + str(x["power_type"]),
                    x["status_name"] + "\n" + x["hardware_info"]["system_vendor"],
                    str(x["owner"]) + "\n" + str(x["pool"]["name"]),
                    x["zone"]["name"],
                    str(x["boot_interface"]["vlan"]["fabric"])
                    + "\n"
                    + str(x["boot_interface"]["vlan"]["name"]),
                    str(x["boot_interface"]["links"][0]["subnet"]["name"])
                    + "\n"
                    + str(x["interface_set"][0]["mac_address"]),
                ]
            )
        except:
            continue

    output_string = tabulate(
        data,
        headers=[
            "Hostname\nSystem ID",
            "Power\nType",
            "Status\nVendor",
            "Owner\nPool",
            "Zone\nSpaces",
            "Fabric\nVLAN",
            "Subnet\nMAC Address",
        ],
        tablefmt="grid",
    )
    print(output_string)


def check_login():
    if not logged_in():
        print("Maas: You must be logged in to perform this operation.")
        sys.exit(ENOAUTH)


def logged_in():
    return os.path.exists(pickle_filepath)


def get_username():
    return pickle.load(open(pickle_filepath, "rb"))


@click.group()
def Maas():
    """
    MAAS CLI mockup (2020-07-31 by stormrider)

    This is a working mockup of a new MAAS CLI being considered.
    """
    global username
    if logged_in():
        username = get_username()


@Maas.command()
@click.argument("username")
@click.argument("maas_url")
@click.argument("api_key")
def login(username, maas_url, api_key):
    """
    Login to a MAAS installation.
    """
    login_string = "maas login " + username + " " + maas_url + " " + api_key
    os.system(login_string)

    pickle.dump(username, open(pickle_filepath, "wb"))

    # maas login billwear http://192.168.43.251:5240/MAAS
    # dmu7xn6j7nT2ftB9ye:crgLzz3sdEELuyDgc2:YndL7zUzq934nFr4TGEjgz8mVGdr9gGt


@Maas.command()
@click.argument("username")
def logout(username):
    """
    Logout of a MAAS installation.
    """
    logout_string = "maas logout " + username
    os.system(logout_string)
    os.remove(pickle_filepath)


@Maas.command()
@click.argument("machine_name", required=False)
@click.option(
    "--format", "Format", help="(json | yaml) - print list as serialized data."
)
def list(machine_name=None, Format=None):
    """
    List one or all machines in human, JSON, or YAML.

    Lists all machines by default, in human-readable output.  
    Limit to one machine with the optional MACHINE_NAME argument.
    Use "--format" to get machine info in a data-serialization language.
    """
    check_login()
    machine_json = get_machine_data("hostname=" + machine_name)

    if Format == "json":
        print(machine_json)
    elif Format == "yaml":
        print(
            yaml.dump(
                yaml.load(json.dumps(machine_json), Loader=yaml.FullLoader),
                default_flow_style=False,
            )
        )
    else:
        print_summary(machine_json)


@Maas.command(name="commission")
@click.argument("machine_name", required=True)
def commission(machine_name):
    """
    Commission one machine.
    """
    check_login()
    machine_json = get_machine_data("hostname=" + machine_name)

    if machine_json == None:
        print("Maas: no machine with hostname=" + hostname + ": exiting")
        sys.exit(ENORECD)

    system_id = machine_json[0]["system_id"]
    args = []
    args.append("maas")
    args.append(username)
    args.append("machine")
    args.append("commission")
    args.append(system_id)

    proc = subprocess.Popen(args, stdout=subprocess.PIPE)

    output = proc.stdout.read()

    print(output)


@Maas.command(name="commission-all")
def commission_all():
    """
    Commission all allocated machines.
    """
    check_login()
    machine_json = get_machine_data("status=ready")

    if machine_json == None:
        print("Maas: no machines in ready state: exiting")
        sys.exit(ENORECD)

    for x in machine_json:
        system_id = x["system_id"]
        args = []
        args.append("maas")
        args.append(username)
        args.append("machine")
        args.append("commission")
        args.append(system_id)
        proc = subprocess.Popen(args, stdout=subprocess.PIPE)
        output = proc.stdout.read()
        print(output)

    machine_json = get_machine_data("status=new")

    if machine_json == None:
        print("Maas: no machines in new state: exiting")
        sys.exit(ENORECD)

    for x in machine_json:
        system_id = x["system_id"]
        args = []
        args.append("maas")
        args.append(username)
        args.append("machine")
        args.append("commission")
        args.append(system_id)

        proc = subprocess.Popen(args, stdout=subprocess.PIPE)
        output = proc.stdout.read()
        print(output)


@Maas.command()
@click.argument("machine_name", required=True)
def allocate(machine_name):
    """
    Acquire one machine.
    """
    check_login()
    machine_json = get_machine_data("hostname=" + machine_name)

    if machine_json == None:
        print("Maas: no machine with hostname=" + hostname + ": exiting")
        sys.exit(ENORECD)

    system_id = "system_id=" + machine_json[0]["system_id"]
    args = []
    args.append("maas")
    args.append(username)
    args.append("machines")
    args.append("allocate")
    args.append(system_id)

    proc = subprocess.Popen(args, stdout=subprocess.PIPE)

    output = proc.stdout.read()

    print(output)


@Maas.command(name="allocate-all")
def allocate_all():
    """
    Acquire all machines in the Ready state.
    """
    check_login()
    machine_json = get_machine_data("status=ready")

    if machine_json == None:
        print("Maas: no machines in ready state: exiting")
        sys.exit(ENORECD)

    for x in machine_json:
        system_id = "system_id=" + x["system_id"]
        args = []
        args.append("maas")
        args.append(username)
        args.append("machines")
        args.append("allocate")
        args.append(system_id)
        proc = subprocess.Popen(args, stdout=subprocess.PIPE)
        output = proc.stdout.read()
        print(output)


@Maas.command()
@click.argument("machine_name", required=True)
def deploy(machine_name):
    """
    Deploy one machine.
    """
    check_login()
    machine_json = get_machine_data("hostname=" + machine_name)

    if machine_json == None:
        print("Maas: no machine with hostname=" + hostname + ": exiting")
        sys.exit(ENORECD)

    system_id = machine_json[0]["system_id"]
    args = []
    args.append("maas")
    args.append(username)
    args.append("machine")
    args.append("deploy")
    args.append(system_id)

    proc = subprocess.Popen(args, stdout=subprocess.PIPE)

    output = proc.stdout.read()

    print(output)


@Maas.command(name="deploy-all")
def deply_all():
    """
    Deploy all allocated machines.
    """
    check_login()
    machine_json = get_machine_data("status=allocated")

    if machine_json == None:
        print("Maas: no machines in ready state: exiting")
        sys.exit(ENORECD)

    for x in machine_json:
        system_id = x["system_id"]
        args = []
        args.append("maas")
        args.append(username)
        args.append("machine")
        args.append("deploy")
        args.append(system_id)
        proc = subprocess.Popen(args, stdout=subprocess.PIPE)
        output = proc.stdout.read()
        print(output)


@Maas.command()
@click.argument("machine_name", required=True)
def release(machine_name):
    """
    Release one machine.
    """
    check_login()
    machine_json = get_machine_data("hostname=" + machine_name)

    if machine_json == None:
        print("Maas: no machine with hostname=" + hostname + ": exiting")
        sys.exit(ENORECD)

    system_id = machine_json[0]["system_id"]
    args = []
    args.append("maas")
    args.append(username)
    args.append("machine")
    args.append("release")
    args.append(system_id)

    proc = subprocess.Popen(args, stdout=subprocess.PIPE)

    output = proc.stdout.read()

    print(output)


@Maas.command(name="set-config-timeout")
@click.argument("number_of_minutes", required=True)
def set_config_timeout(number_of_minutes):
    pass


@Maas.command()
@click.argument("machine_name", required=True)
def delete(machine_name):
    """
    Delete one machine.
    """
    pass


@Maas.command(name="delete-all")
@click.argument("status", default="fail")
def delete_all():
    """
    Delete all machines.
    """
    pass


@Maas.command()
def create():
    """
    Create (add) a new machine.
    """
    pass


@Maas.group()
def subnet():
    pass


@subnet.command()
@click.argument("subnet_id", required=False)
def list(subnet_id=None):
    """
    List one or all subnets.
    """
    pass


@subnet.command()
@click.argument("subnet_cidr", required=True)
@click.argument("manage", required=True, type=click.BOOL)
def update(subnet_cidr, manage):
    """
    Manage or unmanage a subnet.

    The value of manage should be "True" or "False".
    """
    pass


@subnet.command(name="update-dhcp")
@click.argument("subnet_cidr", required=True)
@click.argument("relay", required=True)
def update_dhcp(subnet_cidr, relay):
    """
    Update DHCP to add a DHCP relay.
    """
    pass


# @click.command(help="lsmm - list MAAS machines")
# @click.option(
#     "-p", "profile", default="admin", help='MAAS profile name, defaults to "admin"'
# )
# @click.option("-s", "status", help='Machine status ("new","ready",...); omit for all')
# @click.option("-h", "hostname", help="Machine hostname; omit for all")
# @click.option("-i", "systemid", help="Machine system ID; omit for all")
# @click.option("-z", "zone", help="Machines in zone ZONE; omit for all")
# @click.option("-r", "rpool", help="Machines in resources pool RPOOL; omit for all")
# def cli(profile, status, hostname, systemid, zone, rpool):
#     param = []
#     if status != None:
#         param.append("status=" + status)
#     if hostname != None:
#         param.append("hostname=" + hostname)
#     if systemid != None:
#         param.append("id=" + systemid)
#     if zone != None:
#         param.append("zone=" + zone)
#     if rpool != None:
#         param.append("pool=" + rpool)
#     machine_json = load_machines(profile, param)
#     print_summary(machine_json)


if __name__ == "__main__":
    Maas()
