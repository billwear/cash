#!/usr/bin/python3
import sys, subprocess, json
from tabulate import tabulate
import click


def load_machines(param):
    if param == "all":
        proc = subprocess.Popen(
            ["maas", user_profile, "machines", "read"], stdout=subprocess.PIPE
        )
    else:
        proc = subprocess.Popen(
            ["maas", user_profile, "machines", "read", param], stdout=subprocess.PIPE
        )

    output = proc.stdout.read()

    try:
        machine_json = json.loads(output)
        return machine_json
    except:
        print("couldn't load json correctly; exiting")
        sys.exit()


def load_details(param):
    print("param is " + param)


def print_summary(machine_json):
    data = []

    for x in machine_json:
        try:
            data.append(
                [
                    x["hostname"] + "\n" + x["system_id"],
                    str(x["power_state"]) + "\n" + str(x["power_type"]),
                    x["status_name"] + "\n" + x["hardware_info"]["system_vendor"],
                    str(x["owner"]) + "\n" + str(x["pool"]["name"]),
                    x["zone"]["name"],
                    str(x["boot_interface"]["vlan"]["fabric"])
                    + "\n"
                    + str(x["boot_interface"]["vlan"]["name"]),
                    str(x["boot_interface"]["links"][0]["subnet"]["name"])
                    + "\n"
                    + str(x["interface_set"][0]["mac_address"]),
                ]
            )
        except:
            continue

    output_string = tabulate(
        data,
        headers=[
            "Hostname\nSystem ID",
            "Power\nType",
            "Status\nVendor",
            "Owner\nPool",
            "Zone\nSpaces",
            "Fabric\nVLAN",
            "Subnet\nMAC Address",
        ],
        tablefmt="grid",
    )
    print(output_string)


@click.command(
    help="MAAS machine operations helper script\n\nNote that it's possible to create filters which find no machines"
)
@click.option(
    "-p", "profile", default="admin", help='MAAS profile name, defaults to "admin"'
)
@click.option("-s", "status", help='Machine status ("new","ready",...); omit for all')
@click.option("-h", "hostname", help="Machine hostname; omit for all")
@click.option("-i", "systemid", help="Machine system ID; omit for all")
@click.opiton("-z", "zone", help="Machines in zone ZONE; omit for all")
@click.option("-r", "rpool", help="Machines in resources pool RPOOL; omit for all")
def cli(profile, status, hostname, systemid, zone, rpool):

    pass

    print_summary(machine_json)


@status.command(help="summary for single machine matching HOSTNAME")
@click.argument("hostname")
def byhost(hostname):
    machine_json = load_machines("hostname=" + hostname)
    print_summary(machine_json)


@status.command(help="summary for single machine matching SYSID")
@click.argument("sysid")
def bysysid(sysid):
    machine_json = load_machines("id=" + sysid)
    print_summary(machine_json)


@status.command(help="summary for single machine matching SYSID")
@click.argument("sysid")
def bysysid(sysid):
    machine_json = load_machines("id=" + sysid)
    print_summary(machine_json)


@status.command(help="summary for single machine matching SYSID")
@click.argument("sysid")
def bysysid(sysid):
    machine_json = load_machines("id=" + sysid)
    print_summary(machine_json)


@cli.group(help="print details about a single machine")
def detail():
    pass


@detail.command(help="detail a machine by hostname")
@click.argument("hostname")
def byhost(hostname):
    machine_json = load_details("hostname=" + hostname)


@detail.command(help="detail a machine by system ID")
@click.argument("sysid")
def bysysid(sysid):
    machine_json = load_details("sysid=" + sysid)


def sprint_machine_details(profile, system_id):
    matchstring = "id=" + system_id
    print_machine_details(profile, matchstring)


def hprint_machine_details(profile, hostname):
    matchstring = "hostname=" + hostname
    print_machine_details(profile, matchstring)


def print_machine_details(profile, matchstring):
    output_string = ""
    proc = subprocess.Popen(
        ["maas", profile, "machines", "read", matchstring], stdout=subprocess.PIPE
    )

    output = proc.stdout.read()
    output_list = []

    try:
        machine_json = json.loads(output)
    except:
        print("couldn't load json correctly; exiting")
        sys.exit()

    if machine_json == []:
        item = matchstring.split("=")
        if item[0] == "id":
            item[0] = "system_id"
        error_message = "The " + item[0] + " you have entered -- "
        error_message += item[1] + " -- is no longer in service.\n"
        error_message += "Please check the " + item[0] + " and dial again."
        print(error_message)
        sys.exit()

    hostname = "Hostname\n" + machine_json[0]["hostname"]
    systemid = "System ID\n" + machine_json[0]["system_id"]
    status = "Machine Status\n" + machine_json[0]["status_message"]
    cpu_info = "CPU " + machine_json[0]["architecture"] + "\n"
    cpu_info += str(machine_json[0]["cpu_count"]) + " core(s)\n"
    cpu_info += machine_json[0]["hardware_info"]["cpu_model"]
    ram_info = "Memory\n"
    mem_cap = round((machine_json[0]["memory"] / 1024), 2)
    ram_info += str(mem_cap) + " GiB"
    stg_info = "Storage\n"
    stg_cap = round((machine_json[0]["storage"] / 1024), 2)
    stg_info += str(stg_cap) + " GiB"
    output_list.append([hostname, systemid, status, cpu_info, ram_info, stg_info])
    #    output_string += tabulate(output_list,tablefmt="grid")
    if machine_json[0]["owner"] == None:
        owner = "Owner\n-"
    else:
        owner = "Owner\n" + machine_json[0]["owner"]
    domain = "Domain\n" + machine_json[0]["domain"]["name"]
    zone = "Zone\n" + machine_json[0]["zone"]["name"]
    pool = "Resource pool\n" + machine_json[0]["pool"]["name"]
    ptype = "Power type\n" + machine_json[0]["power_type"]
    tags = "Tags"
    for x in machine_json[0]["tag_names"]:
        tags += "\n" + x
    output_list.append([owner, domain, zone, pool, ptype, tags])
    #    output_string += "\n"+tabulate(output_line,tablefmt="grid")
    network = "Network\n"
    network += machine_json[0]["interface_set"][0]["vendor"]
    nwname = "Name\n" + machine_json[0]["interface_set"][0]["name"]
    macaddr = "MAC address\n"
    macaddr += machine_json[0]["interface_set"][0]["mac_address"]
    lspeed = "Link speed\n"
    lspeed += str(machine_json[0]["interface_set"][0]["link_speed"]) + " Mbps"
    fabric = "Fabric\n"
    fabric += machine_json[0]["boot_interface"]["vlan"]["fabric"]
    dhcp = "DHCP\n"
    if machine_json[0]["interface_set"][0]["vlan"]["dhcp_on"] == True:
        if machine_json[0]["interface_set"][0]["vlan"]["external_dhcp"] == None:
            dhcp += "MAAS-provided"
        else:
            dhcp += "External"
    else:
        dhcp += "Not enabled"
    output_list.append([network, nwname, macaddr, lspeed, fabric, dhcp])
    #    output_string += "\n"+tabulate(output_line,tablefmt="grid")
    hw_heading = "Hardware\nInformation"
    blank_heading = " "
    sysinfo = "System\nInformation"
    vendor = "Vendor\n" + machine_json[0]["hardware_info"]["system_vendor"]
    product = "Product\n" + machine_json[0]["hardware_info"]["system_product"]
    version = "Version\n" + machine_json[0]["hardware_info"]["system_version"]
    serial = "Serial\n" + machine_json[0]["hardware_info"]["system_serial"]
    output_list.append([hw_heading, sysinfo, vendor, product, version, serial])
    mbheading = "Mainboard\nInformation "
    mbvendor = "Vendor\n" + machine_json[0]["hardware_info"]["mainboard_vendor"]
    mbproduct = "Product\n" + machine_json[0]["hardware_info"]["mainboard_product"]
    fwvsn = "F/W version\n"
    fwvsn += machine_json[0]["hardware_info"]["mainboard_firmware_version"]
    fwdate = "F/W date\n"
    fwdate += machine_json[0]["hardware_info"]["mainboard_firmware_date"]
    output_list.append([blank_heading, mbheading, mbvendor, mbproduct, fwvsn, fwdate])
    output_string += "\n" + tabulate(output_list, tablefmt="grid")

    print(output_string)


def print_machine_list(profile):
    proc = subprocess.Popen(
        ["maas", profile, "machines", "read"], stdout=subprocess.PIPE
    )

    output = proc.stdout.read()

    try:
        machine_json = json.loads(output)
    except:
        print("couldn't load json correctly; exiting")
        sys.exit()


if __name__ == "__main__":
    cli()

print_hdetails = False
print_sdetails = False
print_ready = False
print_allocated = False
print_deploying = False
print_deployed = False
sysid_match = ""
host_match = ""

if len(sys.argv) < 2:
    machine_list_help()
elif len(sys.argv) > 1:
    profile = sys.argv[1]
    i = 0
    for x in sys.argv:
        if x == "help":
            machine_list_help()
            sys.exit()
        elif x == "ready":
            if i == 1:
                machine_list_help()
            print_ready = True
        elif x == "allocated":
            if i == 1:
                machine_list_help()
            print_allocated = True
        elif x == "deploying":
            if i == 1:
                machine_list_help()
            print_deploying = True
        elif x == "deployed":
            if i == 1:
                machine_list_help()
            print_deployed = True
        elif x == "hostname":
            if i == 1:
                machine_list_help()
            try:
                print_hdetails = True
                host_match = sys.argv[3]
                break
            except:
                sys.exit()
        elif x == "system_id":
            if i == 1:
                machine_list_help()
            try:
                print_sdetails = True
                sysid_match = sys.argv[3]
                break
            except:
                sys.exit()
        i += 1
else:
    print_ready = True
    print_allocated = True
    print_deploying = True
    print_deployed = True

if print_hdetails == True:
    hprint_machine_details(profile, host_match)
elif print_sdetails == True:
    sprint_machine_details(profile, sysid_match)
else:
    print_machine_list(profile)
